#N canvas 347 29 1093 840 10;
#X text 643 478 what about error handling?;
#X obj 737 687 route vert frag param;
#X obj 42 21 inlet;
#X obj 211 122 separator;
#X text 639 527 no idea yet \, what to do if we have two inputs...
that needs more fiddling anyway.;
#X obj 771 664 r \$0-usetexture;
#X obj 262 315 cnv 15 260 290 empty empty empty 20 12 0 14 -233017
-66577 0;
#X obj 271 415 gemframebuffer;
#X obj 271 440 translateXYZ 0 0 -4;
#X obj 271 554 pix_texture;
#X obj 271 576 square 4;
#X obj 307 503 loadbang;
#X text 391 416 you need this;
#X text 391 429 in combination with;
#X text 391 442 gemframebuffer;
#X obj 169 724 outlet;
#N canvas 255 111 1149 583 @argument_handler 0;
#X obj 69 141 list split 1;
#X text 431 88 the first zero is needed \, because the first argument
of [list] can't be a symbol.;
#X obj 69 90 list 0 \$1 \$2 \$3 \$4 \$5 \$6 \$7 \$8 \$9 \$10 \$11 \$12
\$13 \$14 \$15 \$16 \$17 \$18 \$19 \$20 \$21 \$22 \$23 \$24 \$25 \$26
\$27 \$28;
#X obj 78 228 route list;
#X obj 78 289 list split 1;
#X obj 78 365 del;
#X obj 78 386 list append;
#X obj 78 343 t b a;
#X obj 78 406 s \$0-list-loop;
#X obj 94 200 r \$0-list-loop;
#X obj 188 365 del;
#X obj 188 386 list append;
#X obj 188 343 t b a;
#X obj 188 406 s \$0-list-loop;
#X obj 318 365 del;
#X obj 318 386 list append;
#X obj 318 343 t b a;
#X obj 318 406 s \$0-list-loop;
#X obj 183 290 list split 1;
#X obj 88 426 s \$0-vert;
#X obj 198 426 s \$0-frag;
#X obj 313 290 list split 2;
#X text 315 315 dim = 2 arg;
#X obj 328 426 s \$0-dim;
#X obj 428 365 del;
#X obj 428 386 list append;
#X obj 428 343 t b a;
#X obj 428 406 s \$0-list-loop;
#X obj 438 426 s \$0-param;
#X obj 423 290 list split 2;
#X text 425 315 param min 2 args;
#X obj 668 365 del;
#X obj 668 386 list append;
#X obj 668 343 t b a;
#X obj 668 406 s \$0-list-loop;
#X obj 678 426 s \$0-param;
#X obj 663 290 list split 4;
#X text 665 315 param name+3arg;
#X obj 558 365 del;
#X obj 558 386 list append;
#X obj 558 343 t b a;
#X obj 558 406 s \$0-list-loop;
#X obj 568 426 s \$0-param;
#X text 555 315 param name+2arg;
#X obj 553 290 list split 3;
#X obj 69 67 inlet;
#X obj 789 342 del;
#X obj 789 363 list append;
#X obj 789 320 t b a;
#X obj 789 383 s \$0-list-loop;
#X obj 899 342 del;
#X obj 899 363 list append;
#X obj 899 320 t b a;
#X obj 899 383 s \$0-list-loop;
#X obj 999 342 del;
#X obj 999 363 list append;
#X obj 999 320 t b a;
#X obj 999 383 s \$0-list-loop;
#X obj 789 290 list split 2;
#X obj 799 403 s \$0-q;
#X obj 899 290 list split 1;
#X obj 909 403 s \$0-rect;
#X obj 999 290 list split 1;
#X obj 1009 403 s \$0-txu;
#X msg 850 426 0;
#X obj 78 251 route @vert @frag @dim @param @param2 @param3 @q @rect
@txu;
#X connect 0 1 3 0;
#X connect 2 0 0 0;
#X connect 3 0 65 0;
#X connect 4 0 7 0;
#X connect 4 1 6 1;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 7 0 5 0;
#X connect 7 1 19 0;
#X connect 9 0 3 0;
#X connect 10 0 11 0;
#X connect 11 0 13 0;
#X connect 12 0 10 0;
#X connect 12 1 20 0;
#X connect 14 0 15 0;
#X connect 15 0 17 0;
#X connect 16 0 14 0;
#X connect 16 1 23 0;
#X connect 18 0 12 0;
#X connect 18 1 11 1;
#X connect 21 0 16 0;
#X connect 21 1 15 1;
#X connect 24 0 25 0;
#X connect 25 0 27 0;
#X connect 26 0 24 0;
#X connect 26 1 28 0;
#X connect 29 0 26 0;
#X connect 29 1 25 1;
#X connect 31 0 32 0;
#X connect 32 0 34 0;
#X connect 33 0 31 0;
#X connect 33 1 35 0;
#X connect 36 0 33 0;
#X connect 36 1 32 1;
#X connect 38 0 39 0;
#X connect 39 0 41 0;
#X connect 40 0 38 0;
#X connect 40 1 42 0;
#X connect 44 0 40 0;
#X connect 44 1 39 1;
#X connect 45 0 2 0;
#X connect 46 0 47 0;
#X connect 47 0 49 0;
#X connect 48 0 46 0;
#X connect 48 1 59 0;
#X connect 48 1 64 0;
#X connect 50 0 51 0;
#X connect 51 0 53 0;
#X connect 52 0 50 0;
#X connect 52 1 61 0;
#X connect 54 0 55 0;
#X connect 55 0 57 0;
#X connect 56 0 54 0;
#X connect 56 1 63 0;
#X connect 58 0 48 0;
#X connect 58 1 47 1;
#X connect 60 0 52 0;
#X connect 60 1 51 1;
#X connect 62 0 56 0;
#X connect 62 1 55 1;
#X connect 65 0 4 0;
#X connect 65 1 18 0;
#X connect 65 2 21 0;
#X connect 65 3 29 0;
#X connect 65 4 44 0;
#X connect 65 5 36 0;
#X connect 65 6 58 0;
#X connect 65 7 60 0;
#X connect 65 8 62 0;
#X restore 402 244 pd @argument_handler;
#X text 267 80 param name_of_param arg1 (arg2 \, arg3...);
#X obj 41 204 gemhead;
#X obj 41 166 loadbang;
#X msg 41 185 0;
#X obj 42 76 t b a;
#X text 643 497 maybe you should check arguments before looping the
list;
#X text 639 561 what about @usetexture @nametexture...;
#X text 639 631 what about size and aspectratio??;
#X text 685 390 NOT FINISHED \, BUT WORKING;
#X text 686 226 if you feed the texture to the right inlet \, you have
to bang OR send a gemhead to the left inlet. (I was not sure what the
best solution would be...);
#X text 686 126 glsl.slab laods vertex and/or fragment shaders. if
you give only one of the shaders the other one will be bypassed.;
#X text 643 458 todo and questions...;
#X text 686 106 README:;
#X text 686 166 glsl.slab needs a texture reference (ID) to its right
inlet OR(!) to its left inlet \, in which case this can also trigger
the gemhead. using only the left inlet is the most convenient approach
\, but it is not intuitive for GEM users.;
#X text 686 276 I am using @attributes to pass the arguments \, this
is not really supported \, so the implementation is a hack. for example
there is a @param \, @param2 and @param3 attribute \, related to 1
\, 2 or 3 arguments for the uniform that you try to pass on init.;
#X text 686 346 the left inlet also takes param messages \; everything
after the param is sent directly to glsl_program.;
#X text 639 658 for the future...;
#X text 639 581 @param Mytex 1 \, @txu 1;
#X msg 281 385 dim \$1 \$2;
#X text 348 383 default 256 256;
#X obj 167 604 pix_texture;
#X obj 167 539 gemhead;
#X obj 177 501 loadbang;
#X msg 177 520 0;
#X obj 402 181 t b b;
#X msg 429 202 0;
#X obj 429 222 s \$0-rect;
#X obj 402 159 loadbang;
#X msg 107 582 texunit \$1;
#X obj 107 560 r \$0-txu;
#X obj 271 321 loadbang;
#X msg 271 341 mode 1 \, type FLOAT;
#X obj 180 562 loadbang;
#X msg 180 582 mode 1;
#X obj 42 128 t b b b;
#X obj 192 95 t b a b;
#X obj 42 44 route list;
#X obj 99 68 route param bang;
#X text 170 740 texture id list on gpu;
#X text 266 31 this accepts a list (standard) \, a bang \, param messages
or a gemstate pointer.;
#X text 266 61 had problems with floats instead of textureID lists!
;
#X obj 30 279 cnv 15 100 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 504 130 588 668 shader 0;
#X obj 446 119 inlet;
#X obj 70 44 inlet;
#X obj 83 72 cnv 15 260 480 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 91 524 glsl_program;
#X obj 91 364 glsl_fragment;
#X obj 91 184 glsl_vertex;
#X obj 117 82 r \$0-vert;
#X msg 117 102 open \$1;
#X obj 209 224 change;
#X msg 209 244 link \$1;
#X msg 137 142 1;
#X text 170 146 when shader is loaded;
#X text 170 132 only go through glsl_vertex;
#X obj 169 424 pack 0 0;
#X obj 117 122 t a b;
#X msg 117 282 open \$1;
#X msg 137 322 1;
#X text 170 326 when shader is loaded;
#X obj 117 302 t a b;
#X obj 117 262 r \$0-frag;
#X text 170 312 only go through glsl_frag;
#X obj 159 224 change;
#X obj 239 424 change;
#X msg 239 444 link \$1;
#X obj 179 404 change;
#X msg 169 444 link \$1 \$2;
#X text 89 554 this will bypass shaders as long as they are not loaded
and send link \$1 if only one shader is applied \, link \$1 \$2 if
both shaders are active.;
#X obj 159 244 t b f;
#X floatatom 99 394 0 0 0 0 - - -;
#X floatatom 89 218 0 0 0 0 - - -;
#N canvas 43 118 450 300 gate2_2 0;
#X obj 62 107 inlet;
#X obj 182 87 inlet;
#X msg 92 158 1;
#X msg 122 158 0;
#X msg 152 158 1;
#X msg 182 158 0;
#X obj 62 220 outlet;
#X obj 122 220 outlet;
#X obj 182 117 sel 1 2 0;
#X text 101 33 1 means left \, 2 means right outlet \, 0 = none;
#X obj 62 190 spigot;
#X obj 122 190 spigot 1;
#X text 101 53 default = right outlet;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 1 0 8 0;
#X connect 2 0 10 1;
#X connect 3 0 10 1;
#X connect 4 0 11 1;
#X connect 5 0 11 1;
#X connect 8 0 2 0;
#X connect 8 0 5 0;
#X connect 8 1 3 0;
#X connect 8 1 4 0;
#X connect 8 2 3 0;
#X connect 8 2 5 0;
#X connect 10 0 6 0;
#X connect 11 0 7 0;
#X restore 91 164 pd gate2_2;
#N canvas 43 118 450 300 gate2_2 0;
#X obj 62 107 inlet;
#X obj 182 87 inlet;
#X msg 92 158 1;
#X msg 122 158 0;
#X msg 152 158 1;
#X msg 182 158 0;
#X obj 62 220 outlet;
#X obj 122 220 outlet;
#X obj 182 117 sel 1 2 0;
#X text 101 33 1 means left \, 2 means right outlet \, 0 = none;
#X obj 62 190 spigot;
#X obj 122 190 spigot 1;
#X text 101 53 default = right outlet;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 1 0 8 0;
#X connect 2 0 10 1;
#X connect 3 0 10 1;
#X connect 4 0 11 1;
#X connect 5 0 11 1;
#X connect 8 0 2 0;
#X connect 8 0 5 0;
#X connect 8 1 3 0;
#X connect 8 1 4 0;
#X connect 8 2 3 0;
#X connect 8 2 5 0;
#X connect 10 0 6 0;
#X connect 11 0 7 0;
#X restore 91 344 pd gate2_2;
#X obj 270 192 &&;
#X obj 270 171 t b f;
#X obj 270 212 sel 1;
#X msg 270 232 1;
#N canvas 43 118 450 300 gate2_2 0;
#X obj 62 107 inlet;
#X obj 182 87 inlet;
#X msg 92 158 1;
#X msg 122 158 0;
#X msg 152 158 1;
#X msg 182 158 0;
#X obj 62 220 outlet;
#X obj 122 220 outlet;
#X obj 182 117 sel 1 2 0;
#X text 101 33 1 means left \, 2 means right outlet \, 0 = none;
#X text 101 53 default = right outlet;
#X obj 122 190 spigot 1;
#X obj 62 190 spigot;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 1 0 8 0;
#X connect 2 0 12 1;
#X connect 3 0 12 1;
#X connect 4 0 11 1;
#X connect 5 0 11 1;
#X connect 8 0 2 0;
#X connect 8 0 5 0;
#X connect 8 1 3 0;
#X connect 8 1 4 0;
#X connect 8 2 3 0;
#X connect 8 2 5 0;
#X connect 11 0 7 0;
#X connect 12 0 6 0;
#X restore 159 204 pd gate2_2;
#N canvas 43 118 450 300 gate2_2 0;
#X obj 62 107 inlet;
#X obj 182 87 inlet;
#X msg 92 158 1;
#X msg 122 158 0;
#X msg 152 158 1;
#X msg 182 158 0;
#X obj 62 220 outlet;
#X obj 122 220 outlet;
#X obj 182 117 sel 1 2 0;
#X text 101 33 1 means left \, 2 means right outlet \, 0 = none;
#X text 101 53 default = right outlet;
#X obj 62 190 spigot;
#X obj 122 190 spigot 1;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 1 0 8 0;
#X connect 2 0 11 1;
#X connect 3 0 11 1;
#X connect 4 0 12 1;
#X connect 5 0 12 1;
#X connect 8 0 2 0;
#X connect 8 0 5 0;
#X connect 8 1 3 0;
#X connect 8 1 4 0;
#X connect 8 2 3 0;
#X connect 8 2 5 0;
#X connect 11 0 6 0;
#X connect 12 0 7 0;
#X restore 179 384 pd gate2_2;
#X msg 53 498 print;
#X obj 223 486 print linking;
#N canvas 135 94 735 388 default_params 0;
#X obj 129 146 r \$0-param;
#X obj 129 230 textfile;
#X obj 129 208 list trim;
#X obj 129 251 t b a;
#X obj 99 251 del;
#X msg 85 115 rewind \, bang;
#X obj 85 95 delay 1;
#X obj 85 75 bang;
#X obj 85 42 inlet;
#X text 278 58 this is still kind of a problem... you can't send parameter
commands before the shader is loaded :(;
#X text 278 88 this means we save our params and when programs are
linked \, the init are always sent again...;
#X text 278 118 so \, if you use @param x y z \, then don't send loadbangs
with init values at the same time...;
#X obj 129 281 outlet;
#X obj 129 188 list prepend add;
#X connect 0 0 13 0;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 3 1 12 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 13 0 2 0;
#X restore 173 524 pd default_params;
#X obj 480 560 outlet;
#X connect 0 0 3 0;
#X connect 1 0 5 0;
#X connect 3 0 41 0;
#X connect 4 0 3 0;
#X connect 4 1 37 0;
#X connect 4 1 28 0;
#X connect 5 0 31 0;
#X connect 5 1 36 0;
#X connect 5 1 29 0;
#X connect 6 0 7 0;
#X connect 7 0 14 0;
#X connect 8 0 9 0;
#X connect 9 0 3 0;
#X connect 9 0 40 0;
#X connect 10 0 30 1;
#X connect 10 0 32 0;
#X connect 13 0 25 0;
#X connect 14 0 5 0;
#X connect 14 1 10 0;
#X connect 15 0 18 0;
#X connect 16 0 31 1;
#X connect 16 0 33 0;
#X connect 18 0 4 0;
#X connect 18 1 16 0;
#X connect 19 0 15 0;
#X connect 21 0 27 0;
#X connect 22 0 23 0;
#X connect 23 0 3 0;
#X connect 23 0 40 0;
#X connect 24 0 13 0;
#X connect 25 0 3 0;
#X connect 25 0 39 0;
#X connect 25 0 40 0;
#X connect 27 0 13 0;
#X connect 27 1 13 1;
#X connect 30 0 5 0;
#X connect 30 1 31 0;
#X connect 31 0 4 0;
#X connect 31 1 3 0;
#X connect 32 0 34 0;
#X connect 33 0 32 0;
#X connect 33 1 32 1;
#X connect 34 0 35 0;
#X connect 35 0 36 1;
#X connect 35 0 37 1;
#X connect 36 0 21 0;
#X connect 36 1 8 0;
#X connect 37 0 24 0;
#X connect 37 1 22 0;
#X connect 38 0 3 0;
#X connect 40 0 3 0;
#X restore 41 298 pd shader;
#X msg 307 526 mode 1;
#X text 354 523 using 2 shaders only works;
#X text 354 537 in rect mode (1);
#X text 33 508 weird \, but bang this;
#X text 33 528 before the shader...;
#X obj 271 472 pix_image 512-512.jpg;
#N canvas 387 247 735 360 framebuffersize 0;
#X obj 198 120 sel 0;
#X obj 118 120 sel 0;
#X obj 118 180 0;
#X obj 198 150 256;
#X obj 118 270 outlet;
#X text 342 122 if \$2 has a value \, then this will be used \, if
\$3 has a value \, then it will be used \, too. if only \$2 has a value
\, but \$3 not \, then \$2 is used for both!;
#X obj 118 230 0;
#X obj 118 210 t b f;
#X obj 118 250 pack 0 0;
#X obj 158 61 r \$0-q;
#X obj 158 81 unpack;
#X text 342 67 this can come as an @attribute or as an argument. any
of which will overwrite the default (256);
#X obj 78 90 r \$0-arg2;
#X obj 218 90 r \$0-arg3;
#X connect 0 0 3 0;
#X connect 0 1 3 0;
#X connect 1 0 2 0;
#X connect 1 1 2 0;
#X connect 2 0 7 0;
#X connect 3 0 2 1;
#X connect 3 0 6 1;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 1 8 1;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 10 0 1 0;
#X connect 10 1 0 0;
#X connect 12 0 1 0;
#X connect 13 0 0 0;
#X restore 281 365 pd framebuffersize;
#X connect 2 0 53 0;
#X connect 3 0 59 0;
#X connect 7 0 8 0;
#X connect 7 1 37 1;
#X connect 8 0 65 0;
#X connect 9 0 10 0;
#X connect 11 0 60 0;
#X connect 18 0 59 0;
#X connect 19 0 20 0;
#X connect 20 0 18 0;
#X connect 21 0 51 0;
#X connect 35 0 7 0;
#X connect 37 1 15 0;
#X connect 38 0 37 0;
#X connect 39 0 40 0;
#X connect 40 0 38 0;
#X connect 41 0 16 0;
#X connect 41 1 42 0;
#X connect 42 0 43 0;
#X connect 44 0 41 0;
#X connect 45 0 37 0;
#X connect 46 0 45 0;
#X connect 47 0 48 0;
#X connect 48 0 7 0;
#X connect 49 0 50 0;
#X connect 50 0 37 0;
#X connect 51 1 18 0;
#X connect 51 2 38 0;
#X connect 52 1 3 0;
#X connect 52 2 38 0;
#X connect 53 0 21 0;
#X connect 53 1 54 0;
#X connect 54 0 59 1;
#X connect 54 1 51 0;
#X connect 54 2 52 0;
#X connect 59 0 7 0;
#X connect 60 0 9 0;
#X connect 65 0 9 0;
#X connect 66 0 35 0;
